file: WHILE 
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN BEGIN RETURN SEMICOLON ELSIF 
##
## Ends in an error in state: 160.
##
## stmt_desc -> BEGIN stmts . END SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## BEGIN stmts 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 164, spurious reduction of production nonempty_list(stmt) -> stmt 
## In state 181, spurious reduction of production stmts_desc -> nonempty_list(stmt) 
## In state 159, spurious reduction of production stmts -> stmts_desc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN BEGIN RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 161.
##
## stmt_desc -> BEGIN stmts END . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## BEGIN stmts END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN BEGIN WITH 
##
## Ends in an error in state: 158.
##
## stmt_desc -> BEGIN . stmts END SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## BEGIN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN CHAR_VAL LPAREN NULL WITH 
##
## Ends in an error in state: 120.
##
## expr_desc -> expr . DOT ident [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> CHAR_VAL LPAREN expr . RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## CHAR_VAL LPAREN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN CHAR_VAL LPAREN WITH 
##
## Ends in an error in state: 76.
##
## expr_desc -> CHAR_VAL LPAREN . expr RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## CHAR_VAL LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN CHAR_VAL WITH 
##
## Ends in an error in state: 75.
##
## expr_desc -> CHAR_VAL . LPAREN expr RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## CHAR_VAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT NULL LOOP RETURN SEMICOLON ELSIF 
##
## Ends in an error in state: 182.
##
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts . END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 164, spurious reduction of production nonempty_list(stmt) -> stmt 
## In state 181, spurious reduction of production stmts_desc -> nonempty_list(stmt) 
## In state 159, spurious reduction of production stmts -> stmts_desc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT NULL LOOP RETURN SEMICOLON END LOOP WITH 
##
## Ends in an error in state: 184.
##
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts END LOOP . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts END LOOP 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT NULL LOOP RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 183.
##
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts END . LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT expr LOOP stmts END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT NULL LOOP WITH 
##
## Ends in an error in state: 157.
##
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT expr LOOP . stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT expr LOOP 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT NULL WITH 
##
## Ends in an error in state: 156.
##
## expr_desc -> expr . DOT ident [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT expr . LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL DOTDOT WITH 
##
## Ends in an error in state: 155.
##
## stmt_desc -> FOR ident IN option(REVERSE) expr DOTDOT . expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr DOTDOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN NULL WITH 
##
## Ends in an error in state: 154.
##
## expr_desc -> expr . DOT ident [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOTDOT DOT DIV AND ]
## stmt_desc -> FOR ident IN option(REVERSE) expr . DOTDOT expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN REVERSE BEGIN 
##
## Ends in an error in state: 153.
##
## stmt_desc -> FOR ident IN option(REVERSE) . expr DOTDOT expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN option(REVERSE) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT IN WITH 
##
## Ends in an error in state: 151.
##
## stmt_desc -> FOR ident IN . option(REVERSE) expr DOTDOT expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR IDENT WITH 
##
## Ends in an error in state: 150.
##
## stmt_desc -> FOR ident . IN option(REVERSE) expr DOTDOT expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN FOR WITH 
##
## Ends in an error in state: 149.
##
## stmt_desc -> FOR . ident IN option(REVERSE) expr DOTDOT expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## FOR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT AFFECT NULL WITH 
##
## Ends in an error in state: 173.
##
## expr_desc -> expr . DOT ident [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> ident AFFECT expr . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ident AFFECT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT AFFECT WITH 
##
## Ends in an error in state: 172.
##
## stmt_desc -> ident AFFECT . expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ident AFFECT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT LPAREN NULL COMMA WITH 
##
## Ends in an error in state: 118.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT LPAREN NULL RPAREN WITH 
##
## Ends in an error in state: 170.
##
## expr_desc -> ident LPAREN separated_nonempty_list(COMMA,expr) RPAREN . [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> ident LPAREN separated_nonempty_list(COMMA,expr) RPAREN . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ident LPAREN separated_nonempty_list(COMMA,expr) RPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT LPAREN NULL WITH 
##
## Ends in an error in state: 84.
##
## expr_desc -> expr . DOT ident [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV COMMA AND ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT LPAREN WITH 
##
## Ends in an error in state: 168.
##
## expr_desc -> ident LPAREN . separated_nonempty_list(COMMA,expr) RPAREN [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> ident LPAREN . separated_nonempty_list(COMMA,expr) RPAREN SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ident LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT SEMICOLON END SEMICOLON WITH 
##
## Ends in an error in state: 15.
##
## file -> WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC proc . EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC proc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IDENT WITH 
##
## Ends in an error in state: 166.
##
## expr_desc -> ident . [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> ident . LPAREN separated_nonempty_list(COMMA,expr) RPAREN [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> ident . AFFECT expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
## stmt_desc -> ident . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
## stmt_desc -> ident . LPAREN separated_nonempty_list(COMMA,expr) RPAREN SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSE RETURN SEMICOLON ELSIF 
##
## Ends in an error in state: 195.
##
## elsif_desc -> ELSE stmts . END IF SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSE stmts 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 164, spurious reduction of production nonempty_list(stmt) -> stmt 
## In state 181, spurious reduction of production stmts_desc -> nonempty_list(stmt) 
## In state 159, spurious reduction of production stmts -> stmts_desc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSE RETURN SEMICOLON END IF WITH 
##
## Ends in an error in state: 197.
##
## elsif_desc -> ELSE stmts END IF . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSE stmts END IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSE RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 196.
##
## elsif_desc -> ELSE stmts END . IF SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSE stmts END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSE WITH 
##
## Ends in an error in state: 194.
##
## elsif_desc -> ELSE . stmts END IF SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSIF NULL THEN WITH 
##
## Ends in an error in state: 192.
##
## elsif_desc -> ELSIF expr THEN . stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSIF expr THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSIF NULL WITH 
##
## Ends in an error in state: 191.
##
## elsif_desc -> ELSIF expr . THEN stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
## expr_desc -> expr . DOT ident [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
##
## The known suffix of the stack is as follows:
## ELSIF expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON ELSIF WITH 
##
## Ends in an error in state: 190.
##
## elsif_desc -> ELSIF . expr THEN stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## ELSIF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON END IF WITH 
##
## Ends in an error in state: 188.
##
## elsif_desc -> END IF . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## END IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 187.
##
## elsif_desc -> END . IF SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL THEN WITH 
##
## Ends in an error in state: 148.
##
## stmt_desc -> IF expr THEN . stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## IF expr THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF NULL WITH 
##
## Ends in an error in state: 147.
##
## expr_desc -> expr . DOT ident [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> IF expr . THEN stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## IF expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN IF WITH 
##
## Ends in an error in state: 146.
##
## stmt_desc -> IF . expr THEN stmts elsif [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN LPAREN NULL WITH 
##
## Ends in an error in state: 122.
##
## expr_desc -> LPAREN expr . RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DOT ident [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN LPAREN WITH 
##
## Ends in an error in state: 73.
##
## expr_desc -> LPAREN . expr RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN MINUS NULL WITH 
##
## Ends in an error in state: 124.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> MINUS expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN MINUS WITH 
##
## Ends in an error in state: 72.
##
## expr_desc -> MINUS . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NEW WITH 
##
## Ends in an error in state: 70.
##
## expr_desc -> NEW . ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## NEW 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NEW_LINE WITH 
##
## Ends in an error in state: 144.
##
## stmt_desc -> NEW_LINE . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## NEW_LINE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NOT NULL WITH 
##
## Ends in an error in state: 125.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> NOT expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NOT WITH 
##
## Ends in an error in state: 69.
##
## expr_desc -> NOT . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL AND NULL WITH 
##
## Ends in an error in state: 116.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr AND expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL AND THEN NULL WITH 
##
## Ends in an error in state: 115.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr AND THEN expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND THEN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL AND THEN WITH 
##
## Ends in an error in state: 114.
##
## expr_desc -> expr AND THEN . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL AND WITH 
##
## Ends in an error in state: 113.
##
## expr_desc -> expr AND . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr AND . THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DIV NULL WITH 
##
## Ends in an error in state: 95.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr DIV expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DIV expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DIV WITH 
##
## Ends in an error in state: 94.
##
## expr_desc -> expr DIV . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DOT IDENT AFFECT NULL WITH 
##
## Ends in an error in state: 179.
##
## expr_desc -> expr . DOT ident [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> expr DOT ident AFFECT expr . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DOT ident AFFECT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DOT IDENT AFFECT WITH 
##
## Ends in an error in state: 178.
##
## stmt_desc -> expr DOT ident AFFECT . expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DOT ident AFFECT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DOT IDENT WITH 
##
## Ends in an error in state: 177.
##
## expr_desc -> expr DOT ident . [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> expr DOT ident . AFFECT expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DOT ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL DOT WITH 
##
## Ends in an error in state: 176.
##
## expr_desc -> expr DOT . ident [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> expr DOT . ident AFFECT expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL EQ NULL WITH 
##
## Ends in an error in state: 112.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr EQ expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL EQ WITH 
##
## Ends in an error in state: 111.
##
## expr_desc -> expr EQ . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL GEQ NULL WITH 
##
## Ends in an error in state: 110.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr GEQ expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL GEQ WITH 
##
## Ends in an error in state: 109.
##
## expr_desc -> expr GEQ . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GEQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL GT NULL WITH 
##
## Ends in an error in state: 108.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr GT expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL GT WITH 
##
## Ends in an error in state: 107.
##
## expr_desc -> expr GT . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL LEQ NULL WITH 
##
## Ends in an error in state: 106.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr LEQ expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL LEQ WITH 
##
## Ends in an error in state: 105.
##
## expr_desc -> expr LEQ . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LEQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL LT NULL WITH 
##
## Ends in an error in state: 104.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr LT expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL LT WITH 
##
## Ends in an error in state: 103.
##
## expr_desc -> expr LT . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL MINUS NULL WITH 
##
## Ends in an error in state: 102.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr MINUS expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL MINUS WITH 
##
## Ends in an error in state: 101.
##
## expr_desc -> expr MINUS . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL NEQ NULL WITH 
##
## Ends in an error in state: 100.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr NEQ expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL NEQ WITH 
##
## Ends in an error in state: 99.
##
## expr_desc -> expr NEQ . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL OR ELSE NULL WITH 
##
## Ends in an error in state: 98.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr OR ELSE expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR ELSE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL OR ELSE WITH 
##
## Ends in an error in state: 97.
##
## expr_desc -> expr OR ELSE . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL OR NULL WITH 
##
## Ends in an error in state: 117.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr OR expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL OR WITH 
##
## Ends in an error in state: 96.
##
## expr_desc -> expr OR . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr OR . ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL PLUS NULL WITH 
##
## Ends in an error in state: 93.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr PLUS expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL PLUS WITH 
##
## Ends in an error in state: 92.
##
## expr_desc -> expr PLUS . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL REM NULL WITH 
##
## Ends in an error in state: 91.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr REM expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr REM expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL REM WITH 
##
## Ends in an error in state: 90.
##
## expr_desc -> expr REM . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr REM 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL TIMES NULL WITH 
##
## Ends in an error in state: 86.
##
## expr_desc -> expr . DOT ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . EQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . NEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . LEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GT expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . GEQ expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr TIMES expr . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . REM expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . AND THEN expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL TIMES WITH 
##
## Ends in an error in state: 85.
##
## expr_desc -> expr TIMES . expr [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr TIMES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN NULL WITH 
##
## Ends in an error in state: 175.
##
## expr_desc -> expr . DOT ident [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> expr . DOT ident AFFECT expr SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN PUT LPAREN NULL RPAREN WITH 
##
## Ends in an error in state: 142.
##
## stmt_desc -> PUT LPAREN expr RPAREN . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## PUT LPAREN expr RPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN PUT LPAREN NULL WITH 
##
## Ends in an error in state: 141.
##
## expr_desc -> expr . DOT ident [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES RPAREN REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> PUT LPAREN expr . RPAREN SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## PUT LPAREN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN PUT LPAREN WITH 
##
## Ends in an error in state: 140.
##
## stmt_desc -> PUT LPAREN . expr RPAREN SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## PUT LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN PUT WITH 
##
## Ends in an error in state: 139.
##
## stmt_desc -> PUT . LPAREN expr RPAREN SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## PUT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN NULL WITH 
##
## Ends in an error in state: 138.
##
## expr_desc -> expr . DOT ident [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## option(expr) -> expr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN SEMICOLON ELSIF 
##
## Ends in an error in state: 206.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts . END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 164, spurious reduction of production nonempty_list(stmt) -> stmt 
## In state 181, spurious reduction of production stmts_desc -> nonempty_list(stmt) 
## In state 159, spurious reduction of production stmts -> stmts_desc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN SEMICOLON END IDENT WITH 
##
## Ends in an error in state: 208.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END option(ident) . SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END option(ident) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 207.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END . option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN SEMICOLON WITH 
##
## Ends in an error in state: 164.
##
## nonempty_list(stmt) -> stmt . [ END ELSIF ELSE ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ END ELSIF ELSE ]
##
## The known suffix of the stack is as follows:
## stmt 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN RETURN WITH 
##
## Ends in an error in state: 135.
##
## stmt_desc -> RETURN . option(expr) SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## RETURN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE IDENT LPAREN WITH 
##
## Ends in an error in state: 80.
##
## expr_desc -> ident LPAREN . separated_nonempty_list(COMMA,expr) RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ident LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE IDENT WITH 
##
## Ends in an error in state: 79.
##
## expr_desc -> ident . [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
## expr_desc -> ident . LPAREN separated_nonempty_list(COMMA,expr) RPAREN [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL DOT WITH 
##
## Ends in an error in state: 87.
##
## expr_desc -> expr DOT . ident [ TIMES THEN SEMICOLON RPAREN REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOTDOT DOT DIV COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL LOOP RETURN SEMICOLON ELSIF 
##
## Ends in an error in state: 202.
##
## stmt_desc -> WHILE expr LOOP stmts . END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE expr LOOP stmts 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 164, spurious reduction of production nonempty_list(stmt) -> stmt 
## In state 181, spurious reduction of production stmts_desc -> nonempty_list(stmt) 
## In state 159, spurious reduction of production stmts -> stmts_desc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL LOOP RETURN SEMICOLON END LOOP WITH 
##
## Ends in an error in state: 204.
##
## stmt_desc -> WHILE expr LOOP stmts END LOOP . SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE expr LOOP stmts END LOOP 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL LOOP RETURN SEMICOLON END WITH 
##
## Ends in an error in state: 203.
##
## stmt_desc -> WHILE expr LOOP stmts END . LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE expr LOOP stmts END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL LOOP WITH 
##
## Ends in an error in state: 134.
##
## stmt_desc -> WHILE expr LOOP . stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE expr LOOP 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE NULL WITH 
##
## Ends in an error in state: 133.
##
## expr_desc -> expr . DOT ident [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES REM PLUS OR NEQ MINUS LT LOOP LEQ GT GEQ EQ DOT DIV AND ]
## stmt_desc -> WHILE expr . LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WHILE WITH 
##
## Ends in an error in state: 132.
##
## stmt_desc -> WHILE . expr LOOP stmts END LOOP SEMICOLON [ WHILE RETURN PUT NULL NOT NEW_LINE NEW MINUS LPAREN INT IF IDENT FOR END ELSIF ELSE CHAR_VAL CHAR BOOL BEGIN ]
##
## The known suffix of the stack is as follows:
## WHILE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS BEGIN WITH 
##
## Ends in an error in state: 131.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN . stmts END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS FUNC WITH 
##
## Ends in an error in state: 61.
##
## decl -> FUNC . func [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNC 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS IDENT COLON IDENT AFFECT NULL WITH 
##
## Ends in an error in state: 126.
##
## expr_desc -> expr . DOT ident [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . EQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . NEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . LEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GT expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . GEQ expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . PLUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . MINUS expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . TIMES expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . DIV expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . REM expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . AND THEN expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## expr_desc -> expr . OR ELSE expr [ TIMES SEMICOLON REM PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DOT DIV AND ]
## option(preceded(AFFECT,expr)) -> AFFECT expr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## AFFECT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS IDENT COLON IDENT AFFECT WITH 
##
## Ends in an error in state: 67.
##
## option(preceded(AFFECT,expr)) -> AFFECT . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## AFFECT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS IDENT COLON IDENT WITH 
##
## Ends in an error in state: 66.
##
## decl -> separated_nonempty_list(COMMA,ident) COLON type_annot . option(preceded(AFFECT,expr)) SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON type_annot 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS IDENT COLON WITH 
##
## Ends in an error in state: 65.
##
## decl -> separated_nonempty_list(COMMA,ident) COLON . type_annot option(preceded(AFFECT,expr)) SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS PROC WITH 
##
## Ends in an error in state: 59.
##
## decl -> PROC . proc [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS IDENT WITH 
##
## Ends in an error in state: 57.
##
## decl -> TYPE ident option(preceded(IS,type_annot)) . SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE ident option(preceded(IS,type_annot)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD IDENT COLON IDENT SEMICOLON END RECORD WITH 
##
## Ends in an error in state: 52.
##
## decl -> TYPE ident IS RECORD nonempty_list(fields) END RECORD . SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE ident IS RECORD nonempty_list(fields) END RECORD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD IDENT COLON IDENT SEMICOLON END WITH 
##
## Ends in an error in state: 51.
##
## decl -> TYPE ident IS RECORD nonempty_list(fields) END . RECORD SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE ident IS RECORD nonempty_list(fields) END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD IDENT COLON IDENT SEMICOLON WITH 
##
## Ends in an error in state: 54.
##
## nonempty_list(fields) -> fields . [ END ]
## nonempty_list(fields) -> fields . nonempty_list(fields) [ END ]
##
## The known suffix of the stack is as follows:
## fields 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD IDENT COLON IDENT WITH 
##
## Ends in an error in state: 48.
##
## fields -> separated_nonempty_list(COMMA,ident) COLON type_annot . SEMICOLON [ IDENT END ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON type_annot 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD IDENT COLON WITH 
##
## Ends in an error in state: 47.
##
## fields -> separated_nonempty_list(COMMA,ident) COLON . type_annot SEMICOLON [ IDENT END ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS RECORD WITH 
##
## Ends in an error in state: 45.
##
## decl -> TYPE ident IS RECORD . nonempty_list(fields) END RECORD SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE ident IS RECORD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT IS WITH 
##
## Ends in an error in state: 44.
##
## decl -> TYPE ident IS . RECORD nonempty_list(fields) END RECORD SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
## option(preceded(IS,type_annot)) -> IS . type_annot [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## TYPE ident IS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT SEMICOLON WITH 
##
## Ends in an error in state: 211.
##
## list(decl) -> decl . list(decl) [ BEGIN ]
##
## The known suffix of the stack is as follows:
## decl 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE IDENT WITH 
##
## Ends in an error in state: 43.
##
## decl -> TYPE ident . option(preceded(IS,type_annot)) SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
## decl -> TYPE ident . IS RECORD nonempty_list(fields) END RECORD SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS TYPE WITH 
##
## Ends in an error in state: 42.
##
## decl -> TYPE . ident option(preceded(IS,type_annot)) SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
## decl -> TYPE . ident IS RECORD nonempty_list(fields) END RECORD SEMICOLON [ TYPE PROC IDENT FUNC BEGIN ]
##
## The known suffix of the stack is as follows:
## TYPE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT IS WITH 
##
## Ends in an error in state: 41.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) IS . decls BEGIN stmts END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) IS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON IDENT RPAREN INT 
##
## Ends in an error in state: 37.
##
## proc_or_func -> ident option(params) . option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON IDENT SEMICOLON WITH 
##
## Ends in an error in state: 31.
##
## separated_nonempty_list(SEMICOLON,param) -> param SEMICOLON . separated_nonempty_list(SEMICOLON,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param SEMICOLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON IDENT WITH 
##
## Ends in an error in state: 30.
##
## separated_nonempty_list(SEMICOLON,param) -> param . [ RPAREN ]
## separated_nonempty_list(SEMICOLON,param) -> param . SEMICOLON separated_nonempty_list(SEMICOLON,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON IN OUT WITH 
##
## Ends in an error in state: 25.
##
## param -> separated_nonempty_list(COMMA,ident) COLON mode . type_annot [ SEMICOLON RPAREN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON mode 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON IN WITH 
##
## Ends in an error in state: 23.
##
## mode -> IN . [ IDENT ACCESS ]
## mode -> IN . OUT [ IDENT ACCESS ]
##
## The known suffix of the stack is as follows:
## IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COLON WITH 
##
## Ends in an error in state: 22.
##
## param -> separated_nonempty_list(COMMA,ident) COLON . mode type_annot [ SEMICOLON RPAREN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,ident) COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT COMMA WITH 
##
## Ends in an error in state: 34.
##
## separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## ident COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN IDENT WITH 
##
## Ends in an error in state: 33.
##
## separated_nonempty_list(COMMA,ident) -> ident . [ COLON ]
## separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT LPAREN WITH 
##
## Ends in an error in state: 18.
##
## params -> LPAREN . separated_nonempty_list(SEMICOLON,param) RPAREN [ RETURN IS ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT RETURN ACCESS WITH 
##
## Ends in an error in state: 26.
##
## type_annot -> ACCESS . ident [ SEMICOLON RPAREN IS AFFECT ]
##
## The known suffix of the stack is as follows:
## ACCESS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT RETURN IDENT INT 
##
## Ends in an error in state: 40.
##
## proc_or_func -> ident option(params) option(preceded(RETURN,type_annot)) . IS decls BEGIN stmts END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident option(params) option(preceded(RETURN,type_annot)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT RETURN WITH 
##
## Ends in an error in state: 38.
##
## option(preceded(RETURN,type_annot)) -> RETURN . type_annot [ IS ]
##
## The known suffix of the stack is as follows:
## RETURN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC IDENT WITH 
##
## Ends in an error in state: 17.
##
## proc_or_func -> ident . option(params) option(preceded(RETURN,type_annot)) IS decls BEGIN stmts END option(ident) SEMICOLON [ TYPE PROC IDENT FUNC EOF BEGIN ]
##
## The known suffix of the stack is as follows:
## ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON PROC WITH 
##
## Ends in an error in state: 13.
##
## file -> WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC . proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT SEMICOLON WITH 
##
## Ends in an error in state: 12.
##
## file -> WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON . PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT IDENT WITH 
##
## Ends in an error in state: 11.
##
## file -> WITH ident DOT ident SEMICOLON USE ident DOT ident . SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident DOT ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT DOT WITH 
##
## Ends in an error in state: 10.
##
## file -> WITH ident DOT ident SEMICOLON USE ident DOT . ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE IDENT WITH 
##
## Ends in an error in state: 9.
##
## file -> WITH ident DOT ident SEMICOLON USE ident . DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON USE WITH 
##
## Ends in an error in state: 8.
##
## file -> WITH ident DOT ident SEMICOLON USE . ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON USE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT SEMICOLON WITH 
##
## Ends in an error in state: 7.
##
## file -> WITH ident DOT ident SEMICOLON . USE ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident SEMICOLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT IDENT WITH 
##
## Ends in an error in state: 6.
##
## file -> WITH ident DOT ident . SEMICOLON USE ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT DOT WITH 
##
## Ends in an error in state: 5.
##
## file -> WITH ident DOT . ident SEMICOLON USE ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH IDENT WITH 
##
## Ends in an error in state: 4.
##
## file -> WITH ident . DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: WITH WITH 
##
## Ends in an error in state: 1.
##
## file -> WITH . ident DOT ident SEMICOLON USE ident DOT ident SEMICOLON PROC proc EOF [ # ]
##
## The known suffix of the stack is as follows:
## WITH 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

