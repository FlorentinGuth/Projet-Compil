Tableau d'activation :
paramètres
rbp père
addresse de retour
rbp appelant       <-- rbp
variables locales  <-- rsp au sommet

Records : recopiés sur la pile (besoin de connaitre taille)
access R : pointeur sur le tas (géré avec Eaddr)

Quand on voit un ident, on doit connaître son level et l'offset par rapport à rbp pour aller le chercher (suivre différence des levels fois) + savoir si à l'offset de rbp il y a son adresse ou sa valeur (bool by_reference)

Appel de proc de niveau l : pour avoir le rbp père, suivre lvl - l fois le rbp père, call puis dépiler le rbp père
Passage par valeur : nouvelle variable (recopier la valeur)
Passage par référence (in out) : on empile l'adresse

Affectation : suivre lvl - l fois puis offset connu dans l'ident


Ajouter une expression de type Eaddr ? quand passage par référence ? peut avoir l'adresse d'une variable passée elle-même par référence ?


Attention : main, malloc,print_int reserved -> changer les noms des fonctions -> primitives s'appellent plus pareil

offs dans Lmember : par rapport à rsp (inversé)
Checker les déclarations d'access
Fonction qui renvoie un record ? ...
Fonctions/proc allouent la frame sinon ça va pas le faire
Option de ne pas compter l'offset lorsqu'on déclare le type d'une fonction