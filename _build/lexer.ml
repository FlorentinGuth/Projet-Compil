# 1 "lexer.mll"
 
open Utils
open Parser
open Lexing


let error lexbuf s = raise (Lexing_error (s, (lexeme_start_p lexbuf,
                                              lexeme_end_p   lexbuf)))
(*
let new_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <- { pos with pos_lnum = pos.pos_lnum + 1;
                                  pos_bol = pos.pos_cnum
                       }*)

let reserved = assoc_to_hashtbl
                 [("access",        ACCESS);
                  ("and",           AND);
                  ("begin",         BEGIN);
                  ("else",          ELSE);
                  ("elsif",         ELSIF);
                  ("end",           END);
                  ("false",         BOOL false);
                  ("for",           FOR);
                  ("function",      FUNC);
                  ("if",            IF);
                  ("in",            IN);
                  ("is",            IS);
                  ("loop",          LOOP);
                  ("new",           NEW);
                  ("not",           NOT);
                  ("null",          NULL);
                  ("or",            OR);
                  ("out",           OUT);
                  ("procedure",     PROC);
                  ("record",        RECORD);
                  ("rem",           REM);
                  ("return",        RETURN);
                  ("reverse",       REVERSE);
                  ("then",          THEN);
                  ("true",          BOOL true);
                  ("type",          TYPE);
                  ("use",           USE);
                  ("while",         WHILE);
                  ("with",          WITH);
                  ("character'val", IDENT "character'val")
                 ]

let to_token s =
  let s' = String.lowercase_ascii s in
  try
    Hashtbl.find reserved s'
  with
  | Not_found -> IDENT s'

let to_int lexbuf s =
  try
    let n = int_of_string s in
    assert (n <= 1 lsl 31);
    INT n
  with
  | Failure _ | Assert_failure _ ->
    error lexbuf (Format.sprintf "Integer too big: %s" s)

# 67 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\231\255\232\255\017\000\003\000\238\255\
    \239\255\241\255\243\255\030\000\031\000\032\000\249\255\123\000\
    \209\000\219\000\049\000\001\000\254\255\255\255\253\255\056\000\
    \250\255\248\255\246\255\244\255\236\255\234\255\021\000\253\255\
    \254\255\002\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\020\000\018\000\255\255\
    \255\255\255\255\255\255\010\000\008\000\015\000\255\255\022\000\
    \004\000\003\000\013\000\026\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\020\000\020\000\034\000\019\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
    \021\000\000\000\033\000\000\000\000\000\000\000\000\000\015\000\
    \004\000\003\000\009\000\010\000\008\000\018\000\005\000\013\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\006\000\007\000\012\000\014\000\011\000\029\000\
    \028\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\027\000\026\000\025\000\022\000\024\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
    \000\000\000\000\017\000\000\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\033\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\000\
    \000\000\255\255\030\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\012\000\013\000\018\000\023\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\255\255\255\255\
    \255\255\255\255\017\000\255\255\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 81 "lexer.mll"
                            ( token lexbuf )
# 230 "lexer.ml"

  | 1 ->
# 82 "lexer.mll"
                            ( new_line lexbuf; token lexbuf )
# 235 "lexer.ml"

  | 2 ->
# 83 "lexer.mll"
                            ( comment lexbuf )
# 240 "lexer.ml"

  | 3 ->
let
# 84 "lexer.mll"
             s
# 246 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 84 "lexer.mll"
                            ( to_token s )
# 250 "lexer.ml"

  | 4 ->
let
# 85 "lexer.mll"
               n
# 256 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 85 "lexer.mll"
                            ( to_int lexbuf n )
# 260 "lexer.ml"

  | 5 ->
let
# 86 "lexer.mll"
                   c
# 266 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 86 "lexer.mll"
                            ( CHAR c )
# 270 "lexer.ml"

  | 6 ->
# 87 "lexer.mll"
         ( EQ )
# 275 "lexer.ml"

  | 7 ->
# 88 "lexer.mll"
         ( NEQ )
# 280 "lexer.ml"

  | 8 ->
# 89 "lexer.mll"
         ( LT )
# 285 "lexer.ml"

  | 9 ->
# 90 "lexer.mll"
         ( LEQ )
# 290 "lexer.ml"

  | 10 ->
# 91 "lexer.mll"
         ( GT )
# 295 "lexer.ml"

  | 11 ->
# 92 "lexer.mll"
         ( GEQ )
# 300 "lexer.ml"

  | 12 ->
# 93 "lexer.mll"
         ( PLUS )
# 305 "lexer.ml"

  | 13 ->
# 94 "lexer.mll"
         ( MINUS )
# 310 "lexer.ml"

  | 14 ->
# 95 "lexer.mll"
         ( TIMES )
# 315 "lexer.ml"

  | 15 ->
# 96 "lexer.mll"
         ( DIV )
# 320 "lexer.ml"

  | 16 ->
# 97 "lexer.mll"
         ( COMMA )
# 325 "lexer.ml"

  | 17 ->
# 98 "lexer.mll"
         ( SEMICOLON )
# 330 "lexer.ml"

  | 18 ->
# 99 "lexer.mll"
         ( COLON )
# 335 "lexer.ml"

  | 19 ->
# 100 "lexer.mll"
         ( AFFECT )
# 340 "lexer.ml"

  | 20 ->
# 101 "lexer.mll"
         ( DOT )
# 345 "lexer.ml"

  | 21 ->
# 102 "lexer.mll"
         ( DOTDOT )
# 350 "lexer.ml"

  | 22 ->
# 103 "lexer.mll"
         ( QUOTE )
# 355 "lexer.ml"

  | 23 ->
# 104 "lexer.mll"
         ( LPAREN )
# 360 "lexer.ml"

  | 24 ->
# 105 "lexer.mll"
         ( RPAREN )
# 365 "lexer.ml"

  | 25 ->
# 106 "lexer.mll"
         ( EOF )
# 370 "lexer.ml"

  | 26 ->
let
# 107 "lexer.mll"
         c
# 376 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 107 "lexer.mll"
           ( error lexbuf (Format.sprintf "Unknown character %c" c) )
# 380 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 110 "lexer.mll"
                 ( new_line lexbuf; token lexbuf )
# 392 "lexer.ml"

  | 1 ->
# 111 "lexer.mll"
                 ( EOF )
# 397 "lexer.ml"

  | 2 ->
# 112 "lexer.mll"
                 ( comment lexbuf )
# 402 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

